name: Release

on:
  push:
    tags: [ "v*" ]
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PACKAGE: "shadowquic"
  RUST_TOOLCHAIN: "stable"

jobs:
  compile:
    name: ${{ matrix.release-name || matrix.target || 'Unknown' }}
    permissions:
      contents: write
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Example
          # when not set, default will be used (except target, cross)
          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   release-name: x86_64-linux
          #   toolchain: stable
          #   tool: cross
          #   postfix: ""
          #   extra-args: ""
          #   components: ""
          #   rustflags: ""

          # Linux x86
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            release-name: x86_64-linux
            tool: cross
            # extra-args: "--features jemallocator"
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            release-name: i686-linux
            tool: cross
            # extra-args: "--features jemallocator"
          # Linux x86 musl
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            release-name: x86_64-linux-musl
            tool: cross
            # extra-args: "--features jemallocator"
          - os: ubuntu-latest
            target: i686-unknown-linux-musl
            release-name: i686-linux-musl
            tool: cross
            # extra-args: "--no-default-features --features ring"
          # Linux arm
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            release-name: aarch64-linux
            tool: cross
            # extra-args: "--features jemallocator"
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabi
            release-name: armv7-linux
            tool: cross
            # extra-args: "--no-default-features --features ring"
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            release-name: armv7-linux-hf
            tool: cross
            # extra-args: "--no-default-features --features ring"
          # Linux arm musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            release-name: aarch64-linux-musl
            tool: cross
            # extra-args: "--features jemallocator"
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabi
            release-name: armv7-linux-musl
            tool: cross
            # extra-args: "--no-default-features --features ring"
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            release-name: armv7-linux-muslhf
            tool: cross
            # extra-args: "--no-default-features --features ring"
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            release-name: x86_64-windows
            postfix: ".exe"
          - os: windows-latest
            target: i686-pc-windows-msvc
            release-name: i686-windows
            postfix: ".exe"
            # extra-args: "--no-default-features --features ring"
          # Windows Arm
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            release-name: aarch64-windows
            postfix: ".exe"
            skip-test: true
          # MacOSX
          - os: macos-13
            target: x86_64-apple-darwin
            release-name: x86_64-darwin
            # extra-args: "--features jemallocator"
          - os: macos-14
            target: aarch64-apple-darwin
            release-name: aarch64-darwin
            # extra-args: "--features jemallocator"
          # FreeBSD
          - os: ubuntu-latest
            target: x86_64-unknown-freebsd
            release-name: x86_64-freebsd
            tool: cross
            skip-test: true
            # extra-args: "--no-default-features --features ring"
          # RISC-V
          - os: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            release-name: riscv64gc-linux
            tool: cross
            # extra-args: "--no-default-features --features ring"
          # Loongarch64 ring problem
          - os: ubuntu-latest
            target: loongarch64-unknown-linux-gnu
            release-name: loongarch64-linux
            tool: cross
            # extra-args: "--no-default-features --features ring"
          # Android
          # There is dns problem on android due to cross/qemu/docker
          - os: ubuntu-latest
            target: aarch64-linux-android
            release-name: aarch64-android
            tool: cross
            skip-test: true
          - os: ubuntu-latest
            target: armv7-linux-androideabi
            release-name: armv7-android
            tool: cross
            skip-test: true
          - os: ubuntu-latest
            target: i686-linux-android
            release-name: i686-android
            tool: cross
            skip-test: true            
          - os: ubuntu-latest
            target: x86_64-linux-android
            release-name: x86_64-android
            tool: cross
            skip-test: true  
          # Skip test due to limitation of cross
          - os: ubuntu-latest
            target: i686-unknown-freebsd
            release-name: i686-freebsd
            tool: cross  
            skip-test: true

          # Linux mips: tier-3, pity
          # Windows gnu: tokio dont work
          # Windows aarch: todo

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.release-name || matrix.target }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ matrix.release-name || matrix.target }}

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain || env.RUST_TOOLCHAIN }}
          target: ${{ matrix.target }}
          components: ${{ matrix.components || 'rustfmt, clippy' }}

      - name: Install rust targets & cross
        if: matrix.tool == 'cross'
        run: |
          rustup target add ${TARGET}
          rm -f ~/.cargo/bin/cross*
          cargo install cross --git https://github.com/cross-rs/cross
        env:
          TARGET: ${{ matrix.target }}

      - name: Cargo fmt
        uses: clechasseur/rs-cargo@v3
        with:
          command: fmt
          args: --all -- --check

      - name: Cargo clippy
        uses: clechasseur/rs-cargo@v3
        with:
          tool: ${{ matrix.tool }}
          command: clippy
          args: --all --target ${{ matrix.target }} ${{ matrix.extra-args }} -- -D warnings
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}

      - name: Cargo test
        uses: clechasseur/rs-cargo@v3
        if: ${{ !matrix.skip-test }}
        with:
          tool: ${{ matrix.tool }}
          command: test
          args: --all --release --target ${{ matrix.target }} ${{ matrix.extra-args }}
        env:
          CROSS_CONTAINER_OPTS: "--network host"
          RUSTFLAGS: ${{ matrix.rustflags }}

      - name: Cargo build
        uses: clechasseur/rs-cargo@v3
        with:
          tool: ${{ matrix.tool }}
          command: build
          args: --workspace --release --target ${{ matrix.target }} ${{ matrix.extra-args }}
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}

      - name: Rename binary
        run: mv target/${{ matrix.target }}/release/${{ env.PACKAGE }}${{ matrix.postfix }} ${{ env.PACKAGE }}-${{ matrix.release-name || matrix.target }}${{ matrix.postfix }}

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE }}-${{ matrix.release-name || matrix.target }}
          path: ${{ env.PACKAGE }}-${{ matrix.release-name || matrix.target }}${{ matrix.postfix }}


  release:
    name: Release
    needs: [compile]
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Merge binaries
        uses: actions/upload-artifact/merge@v4
        with:
          name: binaries
          pattern: '*'
          retention-days: 1

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: ./packages

      - name: Clean git tag & release
        if: startsWith(github.ref, 'refs/heads/dev')
        run: |
          gh release delete latest --cleanup-tag --yes --repo $GITHUB_REPOSITORY || true
          # Move latest tag to current commit locally
          git tag -d latest || true
          # Create local tag
          git tag latest
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean git tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Delete latest tag locally (for git-cliff)
          git tag -d latest || true

      - name: Generate a changelog
        uses: orhun/git-cliff-action@main
        id: git-cliff
        with:
          config: .github/cliff.toml
          args: --latest --strip header
        env:
          GITHUB_REPO: ${{ github.repository }}

      - name: Github stable release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          generate_release_notes: false
          body: ${{ steps.git-cliff.outputs.content }}
          files: |
            packages/*
            LICENSE

      - name: Github nightly release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/heads/dev')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          generate_release_notes: false
          body: ${{ steps.git-cliff.outputs.content }}
          tag_name: "latest"
          files: |
            packages/*
            LICENSE

  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: [compile]
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download binaries amd64
        uses: actions/download-artifact@v4
        with:
          name: shadowquic-x86_64-linux-musl
          path: ./packages

      - name: Download binaries arm64
        uses: actions/download-artifact@v4
        with:
          name: shadowquic-aarch64-linux-musl
          path: ./packages

      - name: Rename binary
        run: |
          mv ./packages/shadowquic-x86_64-linux-musl ./packages/shadowquic-amd64
          mv ./packages/shadowquic-aarch64-linux-musl ./packages/shadowquic-arm64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set version tag
        run: |
          if [[ $GITHUB_REF == refs/heads/dev ]] || [[ $GITHUB_REF == refs/pull/*/merge ]]; then
            echo "TAG_VERSION=ghcr.io/${GITHUB_REPOSITORY_OWNER@L}/shadowquic:0.0.0" >> $GITHUB_ENV
          else
            echo "TAG_VERSION=ghcr.io/${GITHUB_REPOSITORY_OWNER@L}/shadowquic:${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          fi
          echo "TAG_LATEST=ghcr.io/${GITHUB_REPOSITORY_OWNER@L}/shadowquic:latest" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v6
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          context: .
          file: .github/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ env.TAG_VERSION }},${{ env.TAG_LATEST }}
          provenance: false
